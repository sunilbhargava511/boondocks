// Prisma schema file for Boondocks Barbershop customer management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id                    String   @id @default(uuid())
  simplybookId          Int?     @unique @map("simplybook_id")
  email                 String
  phone                 String   @unique
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  dateOfBirth          DateTime? @map("date_of_birth")
  conversationPreference Int     @default(2) @map("conversation_preference") // 0-3 scale
  preferredProviderId   String?  @map("preferred_provider_id")
  notes                 String?
  loyaltyPoints        Int      @default(0) @map("loyalty_points")
  totalSpent           Float    @default(0.00) @map("total_spent")
  noShowCount          Int      @default(0) @map("no_show_count")
  cancellationCount    Int      @default(0) @map("cancellation_count")
  accountStatus        String   @default("active") @map("account_status") // active, suspended, blocked
  customerSince        DateTime @default(now()) @map("customer_since") // When they became a customer
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  lastVisit            DateTime? @map("last_visit")
  marketingConsent     Boolean  @default(false) @map("marketing_consent")
  smsConsent           Boolean  @default(false) @map("sms_consent")
  emailConsent         Boolean  @default(true) @map("email_consent")
  syncStatus           String   @default("synced") @map("sync_status") // synced, pending_simplybook_creation, pending_sync, error

  // Relations
  preferences CustomerPreference?
  tags        CustomerTag[]
  appointments Appointment[]
  providerApprovals ProviderCustomerApproval[]
  noShowIncidents NoShowIncident[]
  naughtyListEntries ProviderNaughtyList[]

  @@map("customers")
}

model CustomerPreference {
  customerId          String   @id @map("customer_id")
  preferredDays       Json?    @map("preferred_days") // ["monday", "tuesday"]
  preferredTimes      Json?    @map("preferred_times") // ["morning", "afternoon"]
  preferredServices   Json?    @map("preferred_services") // Array of service IDs
  allergiesNotes      String?  @map("allergies_notes")
  specialInstructions String?  @map("special_instructions")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

model CustomerTag {
  id         String   @id @default(uuid())
  customerId String   @map("customer_id")
  tagName    String   @map("tag_name")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_tags")
}

model Appointment {
  id               String   @id @default(uuid())
  customerId       String   @map("customer_id")
  simplybookId     Int?     @map("simplybook_id")
  serviceId        String   @map("service_id")
  serviceName      String   @map("service_name")
  providerId       String   @map("provider_id")
  providerName     String   @map("provider_name")
  appointmentDate  DateTime @map("appointment_date")
  duration         Int      // in minutes
  price            Float
  status           String   // confirmed, cancelled, completed, no_show, in_progress
  bookingCode      String?  @map("booking_code")
  notes            String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

// Import/Export tracking
model ImportJob {
  id          String   @id @default(uuid())
  fileName    String   @map("file_name")
  status      String   // pending, processing, completed, failed
  totalRows   Int      @map("total_rows")
  processedRows Int    @default(0) @map("processed_rows")
  successCount Int     @default(0) @map("success_count")
  errorCount  Int      @default(0) @map("error_count")
  errors      Json?    // Array of error messages
  startedAt   DateTime @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  createdBy   String   @map("created_by") // Admin user identifier

  @@map("import_jobs")
}

// System Settings for SimplyBook sync
model SystemSettings {
  id                  String   @id @default("default")
  simplybookSyncEnabled Boolean @default(false) @map("simplybook_sync_enabled")
  autoSyncNewCustomers Boolean @default(false) @map("auto_sync_new_customers")
  autoSyncAppointments Boolean @default(false) @map("auto_sync_appointments")
  lastSyncDate        DateTime? @map("last_sync_date")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

// Provider Accounts
model ProviderAccount {
  id                String   @id @default(uuid())
  providerId        String   @unique @map("provider_id") // Links to provider ID in SimplyBook
  email             String   @unique
  passwordHash      String   @map("password_hash")
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  displayName       String?  @map("display_name") // Name shown in booking UI
  phone             String?
  bio               String?  // Provider description/bio
  avatarInitials    String?  @map("avatar_initials") // e.g., "JR" for Jenni Rich
  isActive          Boolean  @default(true) @map("is_active")
  role              String   @default("provider") // provider or admin
  isSelective       Boolean  @default(false) @map("is_selective") // If true, only approved customers can book
  noShowThreshold   Int      @default(3) @map("no_show_threshold") // Number of no-shows before naughty list
  enableNaughtyList Boolean  @default(true) @map("enable_naughty_list") // Enable automatic naughty list
  // Booking restrictions
  notAcceptingNewClients Boolean @default(false) @map("not_accepting_new_clients")
  cashOnly          Boolean  @default(false) @map("cash_only")
  noKidsUnder       Int?     @map("no_kids_under") // Age restriction for children
  conversationPreference Boolean @default(false) @map("conversation_preference") // If true, show conversation level option
  specialNotes      String?  @map("special_notes") // Additional notes about the provider
  lastLogin         DateTime? @map("last_login")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  unavailableDates  ProviderUnavailability[]
  notifications     ProviderNotification[]
  approvedCustomers ProviderCustomerApproval[]
  naughtyListEntries ProviderNaughtyList[]
  noShowIncidents   NoShowIncident[]
  availability      ProviderWeeklyAvailability?
  
  @@map("provider_accounts")
}

// Provider Unavailability (for blocking dates/times)
model ProviderUnavailability {
  id          String   @id @default(uuid())
  providerId  String   @map("provider_id")
  provider    ProviderAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  allDay      Boolean  @default(true) @map("all_day")
  reason      String?  // vacation, sick, personal, etc.
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@index([providerId, startDate])
  @@map("provider_unavailability")
}

// Provider Notifications
model ProviderNotification {
  id          String   @id @default(uuid())
  providerId  String   @map("provider_id")
  provider    ProviderAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  type        String   // new_booking, cancellation, reminder
  title       String
  message     String
  isRead      Boolean  @default(false) @map("is_read")
  appointmentId String? @map("appointment_id")
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@index([providerId, isRead])
  @@map("provider_notifications")
}

// Provider Customer Approval (for selective providers)
model ProviderCustomerApproval {
  id          String   @id @default(uuid())
  providerId  String   @map("provider_id")
  provider    ProviderAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  customerId  String   @map("customer_id")
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  status      String   @default("approved") // approved, pending, rejected
  notes       String?  // Provider's notes about this customer
  approvedAt  DateTime @default(now()) @map("approved_at")
  approvedBy  String   @map("approved_by") // Provider who approved
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([providerId, customerId])
  @@index([providerId, status])
  @@map("provider_customer_approvals")
}

// No-Show Incident Tracking
model NoShowIncident {
  id            String   @id @default(uuid())
  appointmentId String   @map("appointment_id")
  customerId    String   @map("customer_id")
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  providerId    String   @map("provider_id")
  provider      ProviderAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  appointmentDate DateTime @map("appointment_date")
  serviceName   String   @map("service_name")
  customerEmail String   @map("customer_email")
  customerPhone String   @map("customer_phone")
  notes         String?  // Provider's notes about the no-show
  markedBy      String   @map("marked_by") // Provider who marked it
  createdAt     DateTime @default(now()) @map("created_at")
  
  @@index([customerId, providerId])
  @@index([customerEmail])
  @@index([customerPhone])
  @@map("no_show_incidents")
}

// Provider Naughty List (blocked customers)
model ProviderNaughtyList {
  id            String   @id @default(uuid())
  providerId    String   @map("provider_id")
  provider      ProviderAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  customerId    String?  @map("customer_id") // May be null if customer was deleted
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  blockedEmail  String   @map("blocked_email")
  blockedPhone  String   @map("blocked_phone")
  customerName  String   @map("customer_name") // Store name in case customer is deleted
  reason        String   @default("excessive_noshows") // excessive_noshows, manual_block, etc.
  noShowCount   Int      @default(0) @map("no_show_count") // Count at time of blocking
  notes         String?  // Provider's notes
  blockedBy     String   @map("blocked_by") // Provider who blocked them
  isAutomatic   Boolean  @default(false) @map("is_automatic") // Was this automatic or manual?
  canAppeal     Boolean  @default(true) @map("can_appeal") // Can customer appeal this block?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@unique([providerId, blockedEmail])
  @@unique([providerId, blockedPhone])
  @@index([providerId, reason])
  @@index([blockedEmail])
  @@index([blockedPhone])
  @@map("provider_naughty_list")
}

// Provider Weekly Availability Schedule
model ProviderWeeklyAvailability {
  id          String   @id @default(uuid())
  providerId  String   @unique @map("provider_id")
  provider    ProviderAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  
  // Weekly schedule (null means not available that day)
  monday      String?  // e.g., "9:00am-8:00pm"
  tuesday     String?
  wednesday   String?
  thursday    String?
  friday      String?
  saturday    String?
  sunday      String?
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("provider_weekly_availability")
}